<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xmlns:aop="http://www.springframework.org/schema/aop"
       xmlns:tx="http://www.springframework.org/schema/tx"
       xsi:schemaLocation="
       http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd
       http://www.springframework.org/schema/tx http://www.springframework.org/schema/tx/spring-tx.xsd
       http://www.springframework.org/schema/aop http://www.springframework.org/schema/aop/spring-aop.xsd
       ">

    <!-- 创建数据源对象 -->
    <bean name="dataSource" class="com.mchange.v2.c3p0.ComboPooledDataSource">
        <property name="driverClass" value="com.mysql.jdbc.Driver"/>
        <property name="jdbcUrl" value="jdbc:mysql://localhost:3306/web"/>
        <property name="user" value="root"/>
        <property name="password" value="611722"/>
    </bean>

    <!-- 创建sessionFactory对象 -->
    <bean id="sessionFactory" class="org.springframework.orm.hibernate4.LocalSessionFactoryBean">
        <property name="configLocation" value="classpath:hibernate.cfg.xml"/>
        <property name="dataSource" ref="dataSource"/>
    </bean>

    <!-- 创建事务管理对象 -->
    <bean id="transactionManager" class="org.springframework.orm.hibernate4.HibernateTransactionManager">
        <property name="sessionFactory" ref="sessionFactory"/>
        <property name="dataSource" ref="dataSource"/>
    </bean>

    <!-- 创建bean对象 -->
    <bean id="...." class="com.my...."/>
    
    <!-- 通过简单工厂创建bean对象 -->
    <bean id="...." class="com.my...." factory-method="本类内的一个静态方法，返回本类对象"/>

    <!-- ########## 通过工厂类创建bean对象 ########## -->
    <!-- 工厂bean -->
    <bean id="factoryClass" class="com.my...."/>
    <!-- 创建bean -->
    <bean id="userDAO" class="com.my.hibernate.dao.UserDAO" factory-bean="factoryClass" factory-method="本类内的一个静态方法，返回本类对象"/>

    <!-- ########## bean对象的作用域 ########## -->
    <!-- 单例，默认 -->
    <bean id="...." class="com.my...." scope="singleton"/>
    <!-- 单例 -->
    <bean id="...." class="com.my...." scope="prototype"/>

    <!-- ########## 依赖注入 ########## -->
    <!-- 通过有参构造 -->
    <bean id="userDAO" class="com.my.hibernate.dao.UserDAO" >
        <constructor-arg index="位置" type="类型" value/ref=""/>
    </bean>
    <!-- 通过set方法 -->
    <bean id="userDAO" class="com.my.hibernate.dao.UserDAO" >
        <property name="名称" value/ref=""/>
    </bean>
    <!-- 接口注入 -->

    <!-- ########## spEL表达式 ########## -->
    <bean id="userDAO" class="com.my.hibernate.dao.UserDAO" >
        <!-- 直接引用bean -->
        <property name="名称" value="#{obj}"/>
        <!-- 引用bean属性 -->
        <property name="名称" value="#{obj.kk....}"/>
        <!-- 引用bean方法 -->
        <property name="名称" value="#{obj.kk()}"/>
    </bean>

    <!-- ########## 集合注入 ########## -->
    <!-- list -->
    <property name="名称">
        <list>
          <value>简单类型</value>
          <ref>bean</ref>
        </list>
    <property/>
    <!-- set -->
    <property name="名称">
        <set>
          <value>简单类型</value>
          <ref>bean</ref>
        </set>
    <property/>
    <!-- map -->
    <property name="名称">
        <map>
          <entry key="" value=""/>
          <entry key-ref="" value-ref=""/>
      </map>
    </property>
    <!-- properties -->
    <property name="名称">
      <props>
         <prop key="">value</prop>
      </props>
    </property>

    <!-- ########## 后处理器 ########## -->
    <!-- 创建一个类，并实现接口 -->
    <!--
    public class name implements BeanPostProcessor{
    @Override
    public Object postProcessBeforeInitialization(Object o, String s) throws BeansException {return null;}
    @Override
    public Object postProcessAfterInitialization(Object o, String s) throws BeansException {return null;}
    }
  -->
  <!-- 加入配置，不需要id -->
  <bean class="name" />





  <!-- =========================================================================================================== -->
  <!-- =================================================== AOP =================================================== -->
  <!-- =========================================================================================================== -->

  <!-- 连接点(jointPoint):被拦截到的点(spring:对象被拦截到的方法) -->
  <!-- 切入点(pointCut):被拦截到的方法 -->
  <!-- 增强(Advice):增强代码 -->
  <!-- 引介(Introdution):对目标对象增强(动态的为类添加属性、方法) -->
  <!-- 目标对象(Targer):被拦截目标对象 -->
  <!-- 织入(Weaving):把增强应用到目标对象生成新的代理对象的过程 -->
  <!-- 代理(Proxy):一个类被AOP织入增强后，产生的一个结果代理类 -->
  <!-- 切面(Aspect):是切入点和引介的结合 -->


  <!-- ============================================================================================================= -->
  <!-- ================================================= CGlib使用 ================================================= -->
  <!-- ============================================================================================================= -->
  <!-- 0.继承接口:CallBackClass implements MethodInterceptor -->
  <!-- 1.实现方法:intercept -->
  <!-- 2.创建对象:Enhancer en = new Enhancer()-->
  <!-- 3.设置目标对象类:en.setSuperClass(target.class) -->
  <!-- 4.设置回调对象:en.setCallback(new CallBackClass()) -->
  <!-- 5.获得代理对象:en.create() -->


    <bean id="testService" class="com.my.hibernate.service.Test">
        <property name="userDAO" ref="userDAO"/>
    </bean>

    <tx:advice id="transactionAdvice" transaction-manager="transactionManager">
        <tx:attributes>
            <tx:method name="*" isolation="DEFAULT" propagation="REQUIRED" read-only="false" timeout="-1"/>
        </tx:attributes>
    </tx:advice>

    <aop:config>
        <aop:advisor advice-ref="transactionAdvice" pointcut="execution(* com.my.hibernate.service.Test.*(..))"/>
    </aop:config>

</beans>